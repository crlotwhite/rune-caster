name: 📚 Documentation

on:
  push:
    branches: [ main, master ]
    paths:
      - 'include/**'
      - 'src/**'
      - 'docs/**'
      - 'Doxyfile'
      - 'README.md'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'include/**'
      - 'src/**'
      - 'docs/**'
      - 'Doxyfile'
      - 'README.md'
  workflow_dispatch:  # 수동 실행 허용

# GitHub Pages에 배포하기 위한 권한 설정
permissions:
  contents: read
  pages: write
  id-token: write

# 중복 실행 방지
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  # Doxygen 문서 생성
  build-docs:
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 전체 히스토리 가져오기 (버전 정보용)

    - name: 🔧 Setup C++ environment
      uses: aminya/setup-cpp@v1
      with:
        compiler: gcc
        cmake: true
        doxygen: true

    - name: 📋 Install additional dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          graphviz \
          plantuml \
          mscgen

    - name: 📊 Verify Doxygen installation
      run: |
        doxygen --version
        dot -V || echo "Graphviz dot not found"

    - name: 📝 Configure CMake with documentation
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=Release \
          -DRUNE_CASTER_ENABLE_DOCS=ON \
          -DRUNE_CASTER_ENABLE_TESTS=OFF \
          -DRUNE_CASTER_ENABLE_EXAMPLES=OFF

    - name: 🏗️ Build documentation
      run: |
        # 먼저 CMake 타겟으로 시도
        if cmake --build build --target docs 2>/dev/null; then
          echo "✅ Documentation built using CMake target"
          DOC_SOURCE="build/docs/html"
        else
          echo "📝 Building documentation directly with Doxygen"
          doxygen Doxyfile
          DOC_SOURCE="docs/api/html"
        fi

        # 문서 출력 디렉토리 준비
        mkdir -p docs/output

        # 생성된 문서를 표준 위치로 복사
        if [ -d "$DOC_SOURCE" ]; then
          cp -r "$DOC_SOURCE"/* docs/output/
          echo "DOC_SOURCE=$DOC_SOURCE" >> $GITHUB_ENV
        else
          echo "❌ Documentation source not found: $DOC_SOURCE"
          exit 1
        fi

    - name: 📂 Verify documentation output
      run: |
        if [ -d "docs/output" ] && [ -f "docs/output/index.html" ]; then
          echo "✅ Documentation generated successfully"
          ls -la docs/output/
          echo "Total files: $(find docs/output -type f | wc -l)"
          echo "Main page size: $(stat -c%s docs/output/index.html) bytes"
        else
          echo "❌ Documentation not found in expected location"
          echo "Looking for documentation in alternative locations..."
          find . -name "index.html" -type f 2>/dev/null | head -10
          exit 1
        fi

    - name: 🎨 Add custom styling and metadata
      run: |
        # 커스텀 CSS가 있다면 복사
        if [ -f "docs/style.css" ]; then
          cp docs/style.css docs/output/
          echo "✅ Custom CSS added"
        fi

        # 프로젝트 정보를 담은 .nojekyll 파일 생성 (GitHub Pages용)
        touch docs/output/.nojekyll

        # 루트 리다이렉트 파일 생성 (API 문서와 별도)
        cat > docs/output/home.html << 'EOF'
        <!DOCTYPE html>
        <html lang="ko">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Rune Caster - Modern C++ Text Processing Framework</title>
            <style>
                body {
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    margin: 0;
                    padding: 0;
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    min-height: 100vh;
                    color: white;
                }
                .container {
                    text-align: center;
                    background: rgba(255, 255, 255, 0.1);
                    padding: 3rem;
                    border-radius: 20px;
                    backdrop-filter: blur(15px);
                    box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
                    border: 1px solid rgba(255, 255, 255, 0.18);
                    max-width: 600px;
                }
                h1 {
                    margin-bottom: 1rem;
                    font-size: 3rem;
                    text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
                }
                p {
                    margin-bottom: 2rem;
                    font-size: 1.3rem;
                    opacity: 0.9;
                    line-height: 1.6;
                }
                .btn {
                    display: inline-block;
                    padding: 15px 30px;
                    margin: 0 10px;
                    background: rgba(255, 255, 255, 0.2);
                    color: white;
                    text-decoration: none;
                    border-radius: 30px;
                    transition: all 0.3s ease;
                    border: 2px solid rgba(255, 255, 255, 0.3);
                    font-weight: 500;
                }
                .btn:hover {
                    background: rgba(255, 255, 255, 0.3);
                    transform: translateY(-3px);
                    box-shadow: 0 10px 20px rgba(0,0,0,0.2);
                }
                .btn-primary {
                    background: rgba(255, 255, 255, 0.9);
                    color: #764ba2;
                    border: 2px solid rgba(255, 255, 255, 0.9);
                }
                .btn-primary:hover {
                    background: white;
                    color: #667eea;
                }
                .links {
                    margin-top: 2rem;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>🧙‍♂️ Rune Caster</h1>
                <p>Modern C++ Text Processing Framework<br/>
                   <small>STL과 완벽 호환되는 텍스트 처리 라이브러리</small></p>
                <div class="links">
                    <a href="./index.html" class="btn btn-primary">📖 API 문서</a>
                    <a href="https://github.com/crlotwhite/rune-caster" class="btn">💻 GitHub</a>
                </div>
            </div>
        </body>
        </html>
        EOF

        echo "✅ Custom styling and metadata added"

    - name: 📤 Upload documentation artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: docs/output

  # GitHub Pages 배포 (main/master 브랜치에서만)
  deploy-docs:
    needs: build-docs
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: 🚀 Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    - name: 📢 Post deployment info
      run: |
        echo "✅ Documentation deployed successfully!"
        echo "🌐 API 문서 URL: ${{ steps.deployment.outputs.page_url }}"
        echo "🏠 메인 페이지: ${{ steps.deployment.outputs.page_url }}home.html"
        echo ""
        echo "📚 사용 방법:"
        echo "  • API 문서: ${{ steps.deployment.outputs.page_url }}"
        echo "  • 프로젝트 홈: ${{ steps.deployment.outputs.page_url }}home.html"