name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # 매주 월요일 오전 2시에 실행 (의존성 취약점 체크)
    - cron: '0 2 * * 1'

jobs:
  # 멀티플랫폼 빌드 및 테스트
  build-and-test:
    name: 🏗️ Build & Test
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Debug, Release]
        compiler:
          - name: gcc
            cc: gcc
            cxx: g++
          - name: clang
            cc: clang
            cxx: clang++
        exclude:
          # Windows에서는 GCC/Clang 제외 (Visual Studio만 사용)
          - os: windows-latest
            compiler:
              name: gcc
          - os: windows-latest
            compiler:
              name: clang

    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: 🔧 Setup C++ Environment
      uses: aminya/setup-cpp@v1
      with:
        compiler: ${{ matrix.compiler.name }}
        cmake: true
        ninja: true
        doxygen: true
      if: runner.os != 'Windows'

    - name: 🪟 Setup Windows Environment
      if: runner.os == 'Windows'
      uses: microsoft/setup-msbuild@v1.3

    - name: 🗂️ Setup Environment Variables
      shell: bash
      run: |
        echo "CC=${{ matrix.compiler.cc }}" >> $GITHUB_ENV
        echo "CXX=${{ matrix.compiler.cxx }}" >> $GITHUB_ENV
      if: runner.os != 'Windows'

    - name: 📊 System Info
      shell: bash
      run: |
        echo "OS: ${{ runner.os }}"
        echo "Build Type: ${{ matrix.build_type }}"
        echo "Compiler: ${{ matrix.compiler.name }}"

        if command -v ${{ matrix.compiler.cxx }} &> /dev/null; then
          ${{ matrix.compiler.cxx }} --version
        fi

        cmake --version

        # Check for system dependencies
        echo "🔍 Checking system dependencies..."
        pkg-config --version || echo "pkg-config not available"
        pkg-config --exists icu-uc && echo "✅ ICU found via pkg-config" || echo "❌ ICU not found via pkg-config"

    - name: 🧹 Clean Build Directory
      shell: bash
      run: |
        echo "🧹 Cleaning any existing build artifacts..."
        rm -rf build/ || true
        rm -rf _deps/ || true

    - name: 🔨 Configure CMake
      shell: bash
      run: |
        echo "🔧 Configuring CMake with optimized settings..."
        if [ "${{ runner.os }}" == "Windows" ]; then
          cmake -B build \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DRUNE_CASTER_ENABLE_TESTS=ON \
            -DRUNE_CASTER_ENABLE_EXAMPLES=ON \
            -DRUNE_CASTER_ENABLE_DOCS=OFF \
            -DRUNE_CASTER_USE_UTFCPP=ON \
            -DRUNE_CASTER_USE_SYSTEM_ICU=OFF \
            -DFETCHCONTENT_QUIET=OFF
        else
          cmake -B build \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_C_COMPILER=${{ matrix.compiler.cc }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.compiler.cxx }} \
            -DRUNE_CASTER_ENABLE_TESTS=ON \
            -DRUNE_CASTER_ENABLE_EXAMPLES=ON \
            -DRUNE_CASTER_ENABLE_DOCS=OFF \
            -DRUNE_CASTER_USE_UTFCPP=ON \
            -DRUNE_CASTER_USE_SYSTEM_ICU=OFF \
            -DFETCHCONTENT_QUIET=OFF \
            -GNinja
        fi

    - name: 🏗️ Build
      shell: bash
      run: |
        cmake --build build --config ${{ matrix.build_type }} --parallel $(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 2)

    - name: 🧪 Run Tests
      shell: bash
      working-directory: build
      run: |
        if [ "${{ runner.os }}" == "Windows" ]; then
          ctest --config ${{ matrix.build_type }} --output-on-failure --parallel $(nproc 2>/dev/null || echo 2)
        else
          ctest --output-on-failure --parallel $(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 2)
        fi

    - name: 🚀 Run Examples
      shell: bash
      working-directory: build
      run: |
        echo "🔤 Running basic_usage example..."
        if [ "${{ runner.os }}" == "Windows" ]; then
          ./examples/${{ matrix.build_type }}/basic_usage.exe || ./examples/basic_usage.exe
        else
          ./examples/basic_usage
        fi

        echo "✨ Running spell_demo example..."
        if [ "${{ runner.os }}" == "Windows" ]; then
          ./examples/${{ matrix.build_type }}/spell_demo.exe || ./examples/spell_demo.exe
        else
          ./examples/spell_demo
        fi

    - name: 📊 Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.build_type }}-${{ matrix.compiler.name }}
        path: |
          build/Testing/
          build/tests/
        retention-days: 30

  # 코드 품질 검사
  code-quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name: 🔧 Setup C++ Environment
      uses: aminya/setup-cpp@v1
      with:
        compiler: clang
        cmake: true
        cppcheck: true

    - name: 📊 Static Analysis with Cppcheck
      run: |
        cppcheck \
          --enable=all \
          --std=c++20 \
          --language=c++ \
          --platform=native \
          --suppress=missingIncludeSystem \
          --suppress=unusedFunction \
          --suppress=unmatchedSuppression \
          --inline-suppr \
          --xml \
          --xml-version=2 \
          include/ src/ 2> cppcheck-report.xml || true

    - name: 📋 Upload Static Analysis Results
      uses: actions/upload-artifact@v4
      with:
        name: static-analysis-results
        path: cppcheck-report.xml
        retention-days: 30

  # 의존성 보안 검사
  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        trivyignores: '.trivyignore'
      continue-on-error: true

    - name: 📊 Check Code Scanning availability
      id: check-code-scanning
      shell: bash
      run: |
        echo "🔍 Checking if Code Scanning is enabled..."
        # Code Scanning이 활성화되어 있는지 확인
        if curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
           -H "Accept: application/vnd.github.v3+json" \
           "https://api.github.com/repos/${{ github.repository }}/code-scanning/alerts" \
           | grep -q "Code scanning is not enabled"; then
          echo "code_scanning_enabled=false" >> $GITHUB_OUTPUT
          echo "⚠️  Code Scanning is not enabled for this repository"
        else
          echo "code_scanning_enabled=true" >> $GITHUB_OUTPUT
          echo "✅ Code Scanning is available"
        fi
      continue-on-error: true

    - name: 📋 Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && steps.check-code-scanning.outputs.code_scanning_enabled == 'true'
      with:
        sarif_file: 'trivy-results.sarif'

    - name: 📁 Upload Trivy results as artifact (fallback)
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-security-scan-results
        path: trivy-results.sarif
        retention-days: 30

  # 성능 벤치마크 (Release 빌드에서만)
  benchmark:
    name: ⚡ Performance Benchmark
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: 🔧 Setup C++ Environment with GCC
      uses: aminya/setup-cpp@v1
      with:
        compiler: gcc
        cmake: true
        ninja: true

    - name: 🗂️ Setup Environment Variables for GCC
      shell: bash
      run: |
        echo "CC=gcc" >> $GITHUB_ENV
        echo "CXX=g++" >> $GITHUB_ENV

    - name: 📊 Compiler Info
      shell: bash
      run: |
        echo "🔧 Using GCC for optimized benchmark compilation"
        gcc --version
        g++ --version
        cmake --version

    - name: 🏗️ Build Release with Benchmarks
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_COMPILER=gcc \
          -DCMAKE_CXX_COMPILER=g++ \
          -DRUNE_CASTER_ENABLE_TESTS=ON \
          -DRUNE_CASTER_ENABLE_BENCHMARKS=ON \
          -DRUNE_CASTER_ENABLE_EXAMPLES=ON \
          -DRUNE_CASTER_ENABLE_DOCS=OFF \
          -DRUNE_CASTER_USE_UTFCPP=ON \
          -DRUNE_CASTER_USE_SYSTEM_ICU=OFF \
          -DFETCHCONTENT_QUIET=OFF \
          -GNinja
        cmake --build build --parallel $(nproc)

    - name: ⚡ Run Performance Benchmarks
      working-directory: build
      run: |
        echo "🚀 Running performance benchmarks with GCC optimizations..."

        # 벤치마크 테스트가 빌드되었는지 확인
        if [ -d "tests/benchmark" ]; then
          echo "📊 Found benchmark tests directory"
          ls -la tests/benchmark/

          # 벤치마크 실행 파일들을 찾아서 실행
          find tests/benchmark -name "*benchmark*" -executable -type f | while read -r benchmark; do
            echo "🏃‍♂️ Running: $benchmark"
            timeout 300 "$benchmark" --benchmark_format=json --benchmark_out=benchmark-results-$(basename "$benchmark").json || echo "❌ Benchmark $benchmark failed or timed out"
          done
        else
          echo "⚠️  No benchmark directory found, running basic performance test"
          # 기본 성능 테스트
          if [ -f "tests/unit/test_runner" ]; then
            timeout 120 ./tests/unit/test_runner --gtest_filter="*Performance*" || echo "❌ Performance tests not found"
          fi
        fi

        # 결과 파일들을 하나로 합치기
        echo "📊 Consolidating benchmark results..."
        if ls benchmark-results-*.json 1> /dev/null 2>&1; then
          echo "✅ Benchmark results found"
          cat benchmark-results-*.json > consolidated-benchmark-results.json
        else
          echo "⚠️  No benchmark results files found, creating placeholder"
          echo '{"benchmarks": [{"name": "placeholder", "cpu_time": 1.0}]}' > consolidated-benchmark-results.json
        fi

    - name: 📊 Upload Benchmark Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: benchmark-results-gcc
        path: |
          build/benchmark-results-*.json
          build/consolidated-benchmark-results.json
        retention-days: 30

    - name: 📈 Store benchmark result for tracking
      uses: benchmark-action/github-action-benchmark@v1
      if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
      with:
        tool: 'googlecpp'
        output-file-path: build/consolidated-benchmark-results.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        comment-on-alert: true
        alert-threshold: '150%'
        fail-on-alert: false
      continue-on-error: true